<launch>

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="false"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="extra_gazebo_args" default=""/>
	<arg name="gui" default="true"/>
	<arg name="recording" default="false"/>
	<!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
	 rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
	 launch files, but it does nothing. -->
	<arg name="headless" default="false"/>
	<arg name="debug" default="false"/>
	<arg name="physics" default="ode"/>
	<arg name="verbose" default="true"/>
	<arg name="world_name" default="$(find mitu)/worlds/objects_world.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
	<arg name="respawn_gazebo" default="false"/>
	<arg name="use_clock_frequency" default="false"/>
	<arg name="pub_clock_frequency" default="100"/>

	<!-- set use_sim_time flag -->
	<group if="$(arg use_sim_time)">
		<param name="/use_sim_time" value="true" />
	</group>

	<!-- set command arguments -->
	<arg unless="$(arg paused)" name="command_arg1" value=""/>
	<arg     if="$(arg paused)" name="command_arg1" value="-u"/>
	<arg unless="$(arg recording)" name="command_arg2" value=""/>
	<arg     if="$(arg recording)" name="command_arg2" value="-r"/>
	<arg unless="$(arg verbose)" name="command_arg3" value=""/>
	<arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
	<arg unless="$(arg debug)" name="script_type" value="gzserver"/>
	<arg     if="$(arg debug)" name="script_type" value="debug"/>

	<!-- start gazebo server-->
	<group if="$(arg use_clock_frequency)">
		<param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
	</group>
	<node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)">
		<!-- Added to prevent TF collision with Hector mapping-->
		<remap from="tf" to="gazebo_tf"/>
	</node>

	<!-- start gazebo client -->
	<group if="$(arg gui)">
		<node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
	</group>
	
	<!-- fetch the robot model -->
	<!--arg name="model" default="$(find rover)/urdf/rover_fixed.urdf"/-->
	<arg name="model_name" default="mitu"/>
	<arg name="model" default="$(find mitu)/urdf/$(arg model_name).urdf meshDirectory:=$(find mitu)/urdf/meshes/"/>
	
	<!-- Parse urdf file -->
	<param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)" />

	<!-- Spawn the robot into Gazebo -->
	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model mitu -x 0 -y 0 -z 0" />
	
	<!-- Robot state publisher -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
	
	<!-- Start rviz display -->
	<arg name="rvizconfig" default="$(find mitu)/rviz/slam.rviz" />
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
	
	<!-- Start joystick to move around the MiTU -->
	<node pkg="joy" type="joy_node" name="joy_node">
    <param name="dev" value="/dev/input/js1"/>
  </node>
  <node pkg="joystick_translator" type="joystick_translator_diff" name="joystick_translator"/>
  
  <!-- Start SLAM -->
  <arg name="scan_topic" value="/scan"/>
	<node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
		<param name="map_frame" value="map" />
		<param name="base_frame" value="base_link" />
		<param name="odom_frame" value="base_link" />
		<param name="scan_topic" value="$(arg scan_topic)" />
		<param name="use_tf_scan_transformation" value="true" />
		<param name="use_tf_pose_start_estimate" value="false" />
		<param name="map_resolution" value="0.05" />
		<param name="map_size" value="4096" />
		<param name="map_update_angle_thresh" value="0.06" />
		<param name="laser_max_dist" value="22" />
		<param name="advertise_map_service" value="true" />
	</node>
	
	<!-- Debug Tools -->
	<node pkg="rqt_graph" type="rqt_graph" name="rqt_graph"/>
	<node pkg="rqt_tf_tree" type="rqt_tf_tree" name="rqt_tf_tree"/>
</launch>
